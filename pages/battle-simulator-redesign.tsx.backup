import React, { useState, useEffect } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { motion } from 'framer-motion';
import { fetchData } from '../utils/apiutils';
import { POKEMON_TYPE_COLORS } from '../utils/pokemonTypeColors';
import { TypeGradientBadge } from '../components/ui/design-system/TypeGradientBadge';
import { GlassContainer } from '../components/ui/design-system/GlassContainer';
import { CircularCard } from '../components/ui/design-system/CircularCard';
import { GradientButton } from '../components/ui/design-system/GradientButton';
import { EnhancedPokemonSelector, type Pokemon as SelectorPokemon } from '../components/ui/EnhancedPokemonSelector';
import Modal from '../components/ui/modals/Modal';
import FullBleedWrapper from '../components/ui/FullBleedWrapper';
import { InlineLoader } from '../utils/unifiedLoading';
import PageErrorBoundary from '../components/ui/PageErrorBoundary';
import { SmartTooltip } from '../components/qol/ContextualHelp';
import logger from '../utils/logger';
import type { Pokemon, PokemonMove, PokemonType, PokemonStat, PokemonSpecies, Nature, Move } from '../types/api/pokemon';

// [Keep all the existing interfaces and type definitions from the original file]

const BattleSimulator: NextPage = () => {
  // [Keep all the existing state and logic from the original file]
  
  return (
    <PageErrorBoundary pageName="Battle Simulator">
      <Head>
        <title>Pokemon Battle Simulator - DexTrends</title>
        <meta name="description" content="Battle Pokemon with real damage calculations and type effectiveness" />
      </Head>
      
      <FullBleedWrapper gradient="pokedex">
        <div className="max-w-7xl mx-auto px-4 py-8">
          {/* Hero Section with Gradient */}
          <div className="relative mb-12">
            <div className="absolute inset-0 gradient-bg-primary opacity-20 rounded-3xl blur-3xl" />
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="relative text-center"
            >
              <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-pokemon-red to-pink-600 bg-clip-text text-transparent">
                Pokemon Battle Simulator
              </h1>
              <p className="text-gray-600 dark:text-gray-400 text-lg">
                Experience epic battles with real damage calculations
              </p>
            </motion.div>
          </div>
          
          {/* Quick Links with Gradient Buttons */}
          <div className="flex justify-center gap-4 mb-8">
            <GradientButton
              variant="primary"
              onClick={() => window.location.href = '/team-builder/advanced'}
              icon={
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z" />
                </svg>
              }
            >
              Team Builder
            </GradientButton>
            <GradientButton
              variant="secondary"
              onClick={() => window.location.href = '/battle-simulator/damage-calc'}
              icon={
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
              }
            >
              Damage Calculator
            </GradientButton>
          </div>

          {/* Battle Mode Selector with Glass Morphism */}
          <GlassContainer variant="colored" className="mb-8">
            <div className="text-center mb-6">
              <h2 className="text-2xl font-bold mb-2 text-gray-800 dark:text-gray-200">
                Choose Battle Mode
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                Select your preferred battle experience
              </p>
            </div>
            
            <div className="grid md:grid-cols-2 gap-6">
              <motion.button
                onClick={() => handleBattleModeChange('interactive')}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`p-6 rounded-2xl transition-all ${
                  battleMode === 'interactive' 
                    ? 'glass-heavy shadow-xl ring-2 ring-pokemon-red' 
                    : 'glass-light hover:glass-medium'
                }`}
              >
                <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-br from-red-400 to-orange-400 flex items-center justify-center">
                  <svg className="w-10 h-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </div>
                <h3 className="text-lg font-bold mb-2">Interactive Battle</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Take control of every turn with strategic move selection
                </p>
              </motion.button>

              <motion.button
                onClick={() => handleBattleModeChange('automated')}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`p-6 rounded-2xl transition-all ${
                  battleMode === 'automated' 
                    ? 'glass-heavy shadow-xl ring-2 ring-pokemon-blue' 
                    : 'glass-light hover:glass-medium'
                }`}
              >
                <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-br from-blue-400 to-purple-400 flex items-center justify-center">
                  <svg className="w-10 h-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
                <h3 className="text-lg font-bold mb-2">Automated Battle</h3>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Watch AI-controlled Pokemon battle it out automatically
                </p>
              </motion.button>
            </div>
          </GlassContainer>

          {/* Battle Area */}
          <div className="grid lg:grid-cols-2 gap-8">
            {/* Player 1 Section */}
            <div>
              <GlassContainer variant="light" className="h-full">
                <h3 className="text-xl font-bold mb-4 text-center text-gray-800 dark:text-gray-200">
                  Player 1
                </h3>
                
                {!pokemon1 ? (
                  <div className="text-center py-12">
                    <div className="w-32 h-32 mx-auto mb-6 rounded-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-600 dark:to-gray-700 flex items-center justify-center">
                      <span className="text-4xl text-gray-400">?</span>
                    </div>
                    <GradientButton
                      onClick={() => setShowPokemonSelector1(true)}
                      variant="primary"
                      size="lg"
                    >
                      Choose Pokemon
                    </GradientButton>
                  </div>
                ) : (
                  <div className="space-y-6">
                    {/* Pokemon Display */}
                    <div className="text-center">
                      <CircularCard
                        size="lg"
                        image={pokemon1.sprites.other?.['official-artwork']?.front_default || pokemon1.sprites.front_default}
                        alt={pokemon1.name}
                        title={pokemon1.name}
                        gradientFrom={POKEMON_TYPE_COLORS[pokemon1.types[0].type.name.toLowerCase()]}
                        gradientTo={pokemon1.types[1] ? POKEMON_TYPE_COLORS[pokemon1.types[1].type.name.toLowerCase()] : POKEMON_TYPE_COLORS[pokemon1.types[0].type.name.toLowerCase()]}
                        badge={
                          <div className="bg-white rounded-full px-3 py-1 shadow-md">
                            <span className="text-sm font-bold">Lv.{pokemon1Config.level}</span>
                          </div>
                        }
                      />
                    </div>

                    {/* HP Bar */}
                    {battleMode === 'interactive' && battleStarted && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="font-semibold">HP</span>
                          <span>{pokemon1CurrentHP}/{pokemon1MaxHP}</span>
                        </div>
                        <div className="w-full h-4 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                          <motion.div
                            className="h-full bg-gradient-to-r from-green-400 to-green-600"
                            initial={{ width: '100%' }}
                            animate={{ width: `${(pokemon1CurrentHP / pokemon1MaxHP) * 100}%` }}
                            transition={{ duration: 0.5 }}
                          />
                        </div>
                      </div>
                    )}

                    {/* Types */}
                    <div className="flex justify-center gap-2">
                      {pokemon1.types.map((type) => (
                        <TypeGradientBadge
                          key={type.type.name}
                          type={type.type.name}
                          size="sm"
                          gradient={true}
                        />
                      ))}
                    </div>

                    {/* Stats Preview */}
                    <div className="space-y-2">
                      <h4 className="font-semibold text-sm text-gray-700 dark:text-gray-300">
                        Battle Stats
                      </h4>
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div className="glass-light rounded-lg p-2">
                          <span className="text-gray-600 dark:text-gray-400">ATK:</span>
                          <span className="ml-2 font-semibold">{pokemon1Config.stats.attack}</span>
                        </div>
                        <div className="glass-light rounded-lg p-2">
                          <span className="text-gray-600 dark:text-gray-400">DEF:</span>
                          <span className="ml-2 font-semibold">{pokemon1Config.stats.defense}</span>
                        </div>
                        <div className="glass-light rounded-lg p-2">
                          <span className="text-gray-600 dark:text-gray-400">SP.ATK:</span>
                          <span className="ml-2 font-semibold">{pokemon1Config.stats.specialAttack}</span>
                        </div>
                        <div className="glass-light rounded-lg p-2">
                          <span className="text-gray-600 dark:text-gray-400">SPD:</span>
                          <span className="ml-2 font-semibold">{pokemon1Config.stats.speed}</span>
                        </div>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex gap-2">
                      <GradientButton
                        onClick={() => setShowConfig1(true)}
                        variant="secondary"
                        size="sm"
                        fullWidth
                      >
                        Configure
                      </GradientButton>
                      <GradientButton
                        onClick={() => setPokemon1(null)}
                        variant="danger"
                        size="sm"
                        fullWidth
                      >
                        Change
                      </GradientButton>
                    </div>
                  </div>
                )}
              </GlassContainer>
            </div>

            {/* Player 2 Section - Similar structure */}
            {/* [Implement similar structure for Player 2] */}
          </div>

          {/* Battle Controls */}
          {pokemon1 && pokemon2 && !battleStarted && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-8 text-center"
            >
              <GradientButton
                onClick={startBattle}
                variant="primary"
                size="lg"
                className="min-w-[200px]"
              >
                Start Battle!
              </GradientButton>
            </motion.div>
          )}

          {/* Battle Log */}
          {battleLog.length > 0 && (
            <GlassContainer variant="medium" className="mt-8">
              <h3 className="text-xl font-bold mb-4 text-center">Battle Log</h3>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {battleLog.map((log, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-3 glass-light rounded-lg text-sm"
                  >
                    {typeof log === 'string' ? (
                      <span className="text-gray-700 dark:text-gray-300">{log}</span>
                    ) : (
                      // Handle BattleLog objects
                      <div>
                        <div className="flex items-center justify-between mb-1">
                          <span className="font-semibold">{log.player}'s {log.pokemon}</span>
                          <span className="text-xs text-gray-500">
                            {new Date(log.timestamp).toLocaleTimeString()}
                          </span>
                        </div>
                        <div className="text-gray-600 dark:text-gray-400">
                          {log.action}
                          {log.damage && ` - ${log.damage} damage`}
                          {log.critical && ' (Critical hit!)'}
                        </div>
                      </div>
                    )}
                  </motion.div>
                ))}
              </div>
            </GlassContainer>
          )}
        </div>
      </FullBleedWrapper>

      {/* Modals */}
      {/* [Keep all existing modals but style them with GlassContainer] */}
    </PageErrorBoundary>
  );
};

export default BattleSimulator;