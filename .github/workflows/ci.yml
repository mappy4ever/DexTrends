name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_ENV: test
  NEXT_TELEMETRY_DISABLED: 1
  FORCE_COLOR: 3

jobs:
  # Job 1: Linting and Type Checking
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:ci

      - name: Run TypeScript check
        run: npm run typecheck:ci

  # Job 2: Unit and Component Tests
  test-unit:
    name: Unit Tests (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18', '20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:unit:ci

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-unit-node-${{ matrix.node }}
          path: test-results/
          retention-days: 7

      - name: Upload coverage to Codecov
        if: matrix.node == '20'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

  # Job 3: API Tests
  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-api-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-api-

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: npm run test:api:coverage
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: api
          name: api-tests
          fail_ci_if_error: false

  # Job 4: Visual Regression Tests
  test-visual:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-visual-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-visual-

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium webkit firefox

      - name: Run visual regression tests
        run: npm run test:visual:ci
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright

      - name: Upload visual test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-artifacts
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Job 5: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-build-

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # Job 6: All Tests Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-api, test-visual]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-api.result }}" == "failure" || 
                "${{ needs.test-visual.result }}" == "failure" ]]; then
            echo "One or more test suites failed"
            exit 1
          fi
          echo "All tests passed successfully"

  # Job 7: Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-unit, test-api]
    if: github.event_name == 'pull_request'
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage-final.json', 'utf8'));
            
            // Calculate coverage percentages
            let totalStatements = 0;
            let coveredStatements = 0;
            
            Object.values(coverage).forEach(file => {
              totalStatements += file.s ? Object.keys(file.s).length : 0;
              coveredStatements += file.s ? Object.values(file.s).filter(v => v > 0).length : 0;
            });
            
            const percentage = ((coveredStatements / totalStatements) * 100).toFixed(2);
            
            const comment = `## Coverage Report
            
            **Total Coverage:** ${percentage}%
            
            | Type | Coverage |
            |------|----------|
            | Statements | ${percentage}% |
            | Branches | - |
            | Functions | - |
            | Lines | - |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });