name: Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  deployments: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> changelog.md
          else
            git log --pretty=format:"- %s (%h)" --max-count=20 >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.get_version.outputs.version }}" >> changelog.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: release
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_VERSION: ${{ needs.release.outputs.version }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.release.outputs.version }}',
              environment: 'production',
              description: 'Deploy version ${{ needs.release.outputs.version }}',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://dextrends.vercel.app',
              description: 'Deployment successful'
            });

  create-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [release, build-and-deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build standalone
        run: |
          # Update next.config.mjs for standalone build
          sed -i 's/output: "export"/output: "standalone"/' next.config.mjs || true
          npm run build

      - name: Create build archive
        run: |
          tar -czf dextrends-${{ needs.release.outputs.version }}.tar.gz \
            .next \
            public \
            package.json \
            package-lock.json \
            next.config.mjs

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dextrends-${{ needs.release.outputs.version }}.tar.gz
          asset_name: dextrends-${{ needs.release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-and-deploy, create-artifacts]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "Release ${{ needs.release.outputs.version }} deployed successfully!"
          else
            echo "Release ${{ needs.release.outputs.version }} deployment failed!"
            exit 1
          fi