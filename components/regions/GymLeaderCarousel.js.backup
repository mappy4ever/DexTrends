import React, { useState, useRef } from 'react';
import Image from 'next/image';
import { getGymLeaderImage, getBadgeImage } from '../../utils/scrapedImageMapping';
import { TypeBadge } from '../ui/TypeBadge';
import { FadeIn } from '../ui/animations';
import { BsChevronLeft, BsChevronRight } from 'react-icons/bs';
import { gymLeaderTeams, typeEffectiveness } from '../../data/gymLeaderTeams';

const GymLeaderCarousel = ({ region, gymLeaders, theme }) => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [flippedCards, setFlippedCards] = useState({});
  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [scrollLeft, setScrollLeft] = useState(0);
  const carouselRef = useRef(null);

  // Toggle card flip state
  const toggleFlip = (leaderName) => {
    setFlippedCards(prev => ({ ...prev, [leaderName]: !prev[leaderName] }));
  };

  // Gym leader quotes/facts and signature Pokemon
  const gymLeaderData = {
    'Brock': { quote: "I believe in rock-hard determination!", signature: "Onix", signatureId: 95, strategy: "Defensive rock formations" },
    'Misty': { quote: "My policy is an all-out offensive with water-type Pokémon!", signature: "Starmie", signatureId: 121, strategy: "Swift aquatic strikes" },
    'Lt. Surge': { quote: "I tell you, electric Pokémon saved me during the war!", signature: "Raichu", signatureId: 26, strategy: "High-voltage offense" },
    'Erika': { quote: "Oh... I must have dozed off. Welcome to Celadon Gym.", signature: "Vileplume", signatureId: 45, strategy: "Status condition tactics" },
    'Koga': { quote: "A ninja should be able to track his prey through darkness!", signature: "Weezing", signatureId: 110, strategy: "Poison and evasion" },
    'Sabrina': { quote: "I had a vision of your arrival!", signature: "Alakazam", signatureId: 65, strategy: "Psychic domination" },
    'Blaine': { quote: "Hah! Hope you brought Burn Heal!", signature: "Arcanine", signatureId: 59, strategy: "Burning intensity" },
    'Giovanni': { quote: "So! I must say, I am impressed you got here.", signature: "Rhyhorn", signatureId: 111, strategy: "Ground-type supremacy" },
    'Falkner': { quote: "I'll show you the real power of the magnificent bird Pokémon!", signature: "Pidgeot", signatureId: 18, strategy: "Aerial superiority" },
    'Bugsy': { quote: "Bug Pokémon are the best!", signature: "Scyther", signatureId: 123, strategy: "Speed and precision" },
    'Whitney': { quote: "Everyone was into Pokémon, so I got into it, too!", signature: "Miltank", signatureId: 241, strategy: "Rollout devastation" },
    'Morty': { quote: "I can see what you cannot!", signature: "Gengar", signatureId: 94, strategy: "Ghostly misdirection" },
    'Chuck': { quote: "WAHAHAH! I knew you'd come to my gym!", signature: "Machamp", signatureId: 68, strategy: "Raw fighting power" },
    'Jasmine': { quote: "Um... Thank you for your help at the Lighthouse...", signature: "Steelix", signatureId: 208, strategy: "Steel wall defense" },
    'Pryce': { quote: "Pokémon have many experiences in their lives. I, too, have seen and suffered much.", signature: "Piloswine", signatureId: 221, strategy: "Ice age endurance" },
    'Clair': { quote: "I am Clair. The world's best dragon master.", signature: "Kingdra", signatureId: 230, strategy: "Dragon fury" },
    // Hoenn
    'Roxanne': { quote: "I became a Gym Leader so that I may apply what I learned at the Trainer's School.", signature: "Nosepass", signatureId: 299, strategy: "Rock-solid defense" },
    'Brawly': { quote: "A big wave is coming! Let's see if you can ride it!", signature: "Makuhita", signatureId: 296, strategy: "Fighting spirit" },
    'Wattson': { quote: "Wahahahah! Now, that is amusing!", signature: "Magneton", signatureId: 82, strategy: "Electric personality" },
    'Flannery': { quote: "Welcome... Oh, wait. I'm the Gym Leader here!", signature: "Torkoal", signatureId: 324, strategy: "Burning passion" },
    'Norman': { quote: "I'm surprised you managed to get past my gym trainers.", signature: "Slaking", signatureId: 289, strategy: "Balanced power" },
    'Winona': { quote: "I have become one with bird Pokémon and have soared the skies.", signature: "Altaria", signatureId: 334, strategy: "Graceful flight" },
    'Tate': { quote: "We can make...", signature: "Solrock", signatureId: 338, strategy: "Psychic twin power" },
    'Liza': { quote: "...Any attack ineffective!", signature: "Lunatone", signatureId: 337, strategy: "Psychic twin power" },
    'Juan': { quote: "Please, you shall bear witness to our artistry!", signature: "Kingdra", signatureId: 230, strategy: "Water elegance" },
    'Wallace': { quote: "I, the Champion, shall show you the power of my Water types!", signature: "Milotic", signatureId: 350, strategy: "Beauty and power" },
  };

  const getTypeGradient = (type) => {
    const gradients = {
      normal: 'from-gray-400 to-gray-600',
      fire: 'from-red-400 to-orange-600',
      water: 'from-blue-400 to-blue-600',
      electric: 'from-yellow-300 to-yellow-600',
      grass: 'from-green-400 to-green-600',
      ice: 'from-blue-300 to-cyan-500',
      fighting: 'from-red-600 to-red-800',
      poison: 'from-purple-400 to-purple-600',
      ground: 'from-yellow-600 to-yellow-800',
      flying: 'from-blue-300 to-indigo-400',
      psychic: 'from-pink-400 to-pink-600',
      bug: 'from-green-300 to-green-500',
      rock: 'from-yellow-700 to-yellow-900',
      ghost: 'from-purple-600 to-purple-800',
      dragon: 'from-indigo-600 to-purple-700',
      dark: 'from-gray-700 to-gray-900',
      steel: 'from-gray-400 to-gray-600',
      fairy: 'from-pink-300 to-pink-500'
    };
    return gradients[type] || 'from-gray-400 to-gray-600';
  };

  // Handle carousel navigation
  const scrollToLeader = (index) => {
    if (carouselRef.current) {
      const isMobile = window.innerWidth <= 850;
      const cardWidth = isMobile ? (window.innerWidth - 64) : 900; // Updated for new card width
      const gap = isMobile ? 16 : 32; // Responsive gap
      const scrollPosition = index * (cardWidth + gap);
      carouselRef.current.scrollTo({
        left: scrollPosition,
        behavior: 'smooth'
      });
      setActiveIndex(index);
    }
  };

  const handlePrev = () => {
    const newIndex = activeIndex > 0 ? activeIndex - 1 : gymLeaders.length - 1;
    scrollToLeader(newIndex);
  };

  const handleNext = () => {
    const newIndex = activeIndex < gymLeaders.length - 1 ? activeIndex + 1 : 0;
    scrollToLeader(newIndex);
  };

  // Touch/Mouse drag handling
  const handleMouseDown = (e) => {
    setIsDragging(true);
    setStartX(e.pageX - carouselRef.current.offsetLeft);
    setScrollLeft(carouselRef.current.scrollLeft);
  };

  const handleTouchStart = (e) => {
    setIsDragging(true);
    setStartX(e.touches[0].pageX - carouselRef.current.offsetLeft);
    setScrollLeft(carouselRef.current.scrollLeft);
  };

  const handleMouseMove = (e) => {
    if (!isDragging) return;
    e.preventDefault();
    const x = e.pageX - carouselRef.current.offsetLeft;
    const walk = (x - startX) * 2;
    carouselRef.current.scrollLeft = scrollLeft - walk;
  };

  const handleTouchMove = (e) => {
    if (!isDragging) return;
    const x = e.touches[0].pageX - carouselRef.current.offsetLeft;
    const walk = (x - startX) * 2;
    carouselRef.current.scrollLeft = scrollLeft - walk;
  };

  const handleDragEnd = () => {
    setIsDragging(false);
  };

  return (
    <div>
      <FadeIn>
        <div className="text-center mb-8">
          <h3 className="text-2xl font-bold mb-2">
            Gym Leader Challenge
          </h3>
          <p className="text-base text-gray-600 dark:text-gray-400">
            Defeat all {gymLeaders.length} Gym Leaders to earn their badges
          </p>
        </div>
      </FadeIn>

      {/* Carousel Container */}
      <div className="relative">
          {/* Navigation Buttons */}
          <button
            onClick={handlePrev}
            className="absolute left-0 top-1/2 -translate-y-1/2 z-20 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full p-4 shadow-xl hover:scale-110 transition-transform"
          >
            <BsChevronLeft className="text-2xl" />
          </button>
          <button
            onClick={handleNext}
            className="absolute right-0 top-1/2 -translate-y-1/2 z-20 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-full p-4 shadow-xl hover:scale-110 transition-transform"
          >
            <BsChevronRight className="text-2xl" />
          </button>

          {/* Carousel */}
          <div
            ref={carouselRef}
            className="flex gap-8 overflow-x-auto scrollbar-hide pb-8"
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleDragEnd}
            onMouseLeave={handleDragEnd}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleDragEnd}
            style={{
              scrollbarWidth: 'none',
              msOverflowStyle: 'none',
              WebkitOverflowScrolling: 'touch'
            }}
          >
            {gymLeaders.map((leader, index) => {
              const teamData = gymLeaderTeams[leader.name];
              const weaknesses = teamData?.weakAgainst || typeEffectiveness[leader.type]?.weakTo || [];
              const isFlipped = flippedCards[leader.name];
              
              return (
                <div
                  key={leader.name}
                  className="flex-shrink-0 w-[900px] h-[700px] relative carousel-card perspective-1000"
                  onClick={() => toggleFlip(leader.name)}
                >
                  <div className={`flip-card ${isFlipped ? 'flipped' : ''}`}>
                    {/* Front Side - Just the gym leader image */}
                    <div className="flip-card-front">
                      <div className={`relative h-full w-full rounded-3xl overflow-hidden cursor-pointer ${
                        theme === 'dark' ? 'bg-gray-900' : 'bg-gray-100'
                      } shadow-2xl`}>
                        <Image
                          src={getGymLeaderImage(leader.name, 1)}
                          alt={leader.name}
                          fill
                          className="object-cover"
                          onError={(e) => {
                            const currentSrc = e.target.src;
                            const match = currentSrc.match(/-(\d+)\.(png|jpg)$/);
                            if (match) {
                              const num = parseInt(match[1]);
                              if (num < 5) {
                                e.target.src = getGymLeaderImage(leader.name, num + 1);
                              } else {
                                e.target.src = `/images/gym-leaders/${leader.name.toLowerCase()}.png`;
                              }
                            }
                          }}
                        />
                        {/* Subtle gradient overlay */}
                        <div className="absolute inset-0 bg-gradient-to-t from-black/30 via-transparent to-transparent" />
                        
                        {/* Flip indicator */}
                        <div className="absolute bottom-6 right-6 bg-white/90 backdrop-blur-sm rounded-full px-6 py-3 flex items-center gap-2 shadow-lg">
                          <span className="text-gray-900 dark:text-gray-900 font-bold">Click to flip</span>
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                        </div>
                      </div>
                    </div>

                    {/* Back Side - Information with cutting through effect */}
                    <div className="flip-card-back">
                      <div className={`relative h-full w-full rounded-3xl overflow-hidden ${
                        theme === 'dark' ? 'bg-gray-800' : 'bg-white'
                      } shadow-2xl`}>
                        {/* Type-themed background */}
                        <div className={`absolute inset-0 bg-gradient-to-br ${getTypeGradient(leader.type)} opacity-10`} />
                        
                        {/* Cutting through gym leader image */}
                        <div className="absolute left-0 top-0 h-full w-[320px] z-10">
                          <div className="relative h-full w-full">
                            <Image
                              src={getGymLeaderImage(leader.name, 1)}
                              alt={leader.name}
                              fill
                              className="object-cover"
                              style={{ 
                                clipPath: 'polygon(0 0, 85% 0, 100% 100%, 0 100%)',
                                filter: 'drop-shadow(10px 0 20px rgba(0,0,0,0.3))'
                              }}
                              onError={(e) => {
                                const currentSrc = e.target.src;
                                const match = currentSrc.match(/-(\d+)\.(png|jpg)$/);
                                if (match) {
                                  const num = parseInt(match[1]);
                                  if (num < 5) {
                                    e.target.src = getGymLeaderImage(leader.name, num + 1);
                                  } else {
                                    e.target.src = `/images/gym-leaders/${leader.name.toLowerCase()}.png`;
                                  }
                                }
                              }}
                            />
                            {/* Edge gradient for blending */}
                            <div className="absolute inset-y-0 right-0 w-20 bg-gradient-to-r from-transparent via-black/20 to-transparent" />
                          </div>
                        </div>

                        {/* Content flowing around the image */}
                        <div className="relative h-full pl-[280px] pr-8 py-8 overflow-y-auto">
                          {/* Header section */}
                          <div className="mb-6">
                            {/* Leader Number Badge */}
                            <div className="inline-flex items-center gap-2 mb-3">
                              <div className="w-12 h-12 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-lg">
                                <span className="text-white font-black text-xl">#{index + 1}</span>
                              </div>
                              <div className="relative w-16 h-16">
                                <Image
                                  src={getBadgeImage(leader.badge, region.id)}
                                  alt={leader.badge}
                                  fill
                                  className="object-contain"
                                  onError={(e) => {
                                    e.target.style.display = 'none';
                                  }}
                                />
                              </div>
                            </div>
                            
                            <h3 className="text-5xl font-black mb-2">{leader.name}</h3>
                            <p className="text-xl text-gray-600 dark:text-gray-400 mb-3">{leader.city} Gym Leader</p>
                            
                            {/* Type Badge */}
                            <div className="flex items-center gap-3 mb-4">
                              <TypeBadge type={leader.type} size="lg" />
                              <span className="text-lg font-bold text-gray-600 dark:text-gray-400">
                                {leader.type.charAt(0).toUpperCase() + leader.type.slice(1)}-type Specialist
                              </span>
                            </div>
                          </div>

                          {/* Quote */}
                          <div className="mb-5 p-4 rounded-xl bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600">
                            <p className="text-lg italic text-gray-700 dark:text-gray-200">
                              "{gymLeaderData[leader.name]?.quote || `Master of ${leader.type}-type Pokémon!`}"
                            </p>
                          </div>

                          {/* Strategy & Badge */}
                          <div className="mb-5 flex items-center justify-between">
                            <div className={`inline-flex items-center gap-2 px-6 py-3 rounded-full bg-gradient-to-r ${region.color} text-white font-bold shadow-lg`}>
                              <span>{leader.badge}</span>
                            </div>
                            {gymLeaderData[leader.name] && (
                              <p className="text-sm font-semibold text-gray-600 dark:text-gray-400">
                                Strategy: {gymLeaderData[leader.name].strategy}
                              </p>
                            )}
                          </div>

                          {/* Weak Against Section */}
                          {weaknesses.length > 0 && (
                            <div className="mb-5 p-3 rounded-xl bg-red-50 dark:bg-red-900/20 border-2 border-red-200 dark:border-red-800">
                              <p className="text-sm font-bold text-red-700 dark:text-red-400 mb-2">WEAK AGAINST:</p>
                              <div className="flex flex-wrap gap-2">
                                {weaknesses.map(type => (
                                  <TypeBadge key={type} type={type} size="sm" />
                                ))}
                              </div>
                            </div>
                          )}

                          {/* Pokemon Team Grid */}
                          {teamData && (
                            <div>
                              <h4 className="text-xl font-bold mb-3 text-gray-800 dark:text-gray-200">
                                Full Team
                              </h4>
                              <div className="grid grid-cols-2 gap-2">
                                {teamData.team.map((pokemon, idx) => (
                                  <div key={idx} className="bg-white/50 dark:bg-black/30 rounded-lg p-2 backdrop-blur-sm border border-gray-200 dark:border-gray-700">
                                    <div className="flex items-center gap-2">
                                      <div className="relative w-12 h-12 flex-shrink-0">
                                        <Image
                                          src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemon.id}.png`}
                                          alt={pokemon.name}
                                          fill
                                          className="object-contain"
                                        />
                                      </div>
                                      <div className="flex-1 min-w-0">
                                        <p className="font-bold text-sm truncate">{pokemon.name}</p>
                                        <div className="flex items-center gap-1">
                                          <span className="text-xs text-gray-600 dark:text-gray-400">Lv.{pokemon.level}</span>
                                          {pokemon.types.map(type => (
                                            <span key={type} className={`text-xs px-1.5 py-0.5 rounded bg-gradient-to-r ${getTypeGradient(type)} text-white`}>
                                              {type}
                                            </span>
                                          ))}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          {/* Progress Indicators */}
          <div className="flex justify-center gap-3 mt-8">
            {gymLeaders.map((_, index) => (
              <button
                key={index}
                onClick={() => scrollToLeader(index)}
                className={`h-3 rounded-full transition-all ${
                  index === activeIndex 
                    ? `w-12 bg-gradient-to-r ${region.color}` 
                    : 'w-3 bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'
                }`}
              />
            ))}
          </div>
        </div>
      </div>
      
      {/* <style jsx>{`
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
        
        .perspective-1000 {
          perspective: 1000px;
        }
        
        .flip-card {
          position: absolute;
          width: 100%;
          height: 100%;
          transition: transform 0.8s;
          transform-style: preserve-3d;
        }
        
        .flip-card.flipped {
          transform: rotateY(180deg);
        }
        
        .flip-card-front,
        .flip-card-back {
          position: absolute;
          width: 100%;
          height: 100%;
          -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
        }
        
        .flip-card-back {
          transform: rotateY(180deg);
        }
        
        @media (max-width: 850px) {
          .carousel-card {
            width: calc(100vw - 4rem) !important;
            height: 600px !important;
          }
          
          .flip-card-back .absolute.left-0 {
            width: 240px !important;
          }
          
          .flip-card-back .pl-\\[280px\\] {
            padding-left: 200px !important;
          }
        }
      `}</style> */}
    </div>
  );
};

export default GymLeaderCarousel;